;; Keep configuration parameters
;;
;;  Copyright (c) 2003-2007 Scheme Arts, L.L.C., All rights reserved.
;;  Copyright (c) 2003-2007 Time Intermedia Corporation, All rights reserved.
;;  See COPYING for terms and conditions of using this software
;;
;; This is intended to be loaded by kahua servers to share common
;; configuration parameters.
;;
;; The configuration file is simply loaded.  It must contain
;; an expression that creates a singleton instance of <kahua-config>.
;;
;; (make <kahua-config>
;;   :sockbase ....
;;   :working-directory ...)
;;

(define-module kahua.config
  (use gauche.parameter)
  (use file.util)
  (use util.list)
  (use util.match)
  (use kahua.object-pool)
  (export kahua-common-init
          <kahua-custom> <kahua-config>
          kahua-config

          ;; Global Accessor
          kahua-site-root
          kahua-sockbase
          kahua-working-directory
          kahua-app-servers
          kahua-application-directory
          kahua-plugin-directory
          kahua-template-directory
          kahua-database-directory
          kahua-data-directory
          kahua-temporary-directory
          kahua-log-directory
          kahua-cgilog-directory
          kahua-run-directory
          kahua-etc-directory
          kahua-default-database-name
          kahua-error-document-alist

          ;; Global Getter
          kahua-timeout-mins
          kahua-userconf-file
          kahua-auto-restart
          kahua-secure-sandbox
          kahua-spvr-concurrency
          kahua-httpd-concurrency
          kahua-keyserv-concurrency
          kahua-session-domain
          kahua-config-file

          ;; Utilities
          kahua-sockbase-abs-path
          kahua-tmpbase
          kahua-dbpath
          kahua-datapath
          kahua-logpath
          kahua-cgilogpath
          kahua-spvr-pidpath
          kahua-keyserv-pidpath
          kahua-httpd-pidpath
          kahua-static-document-path
          kahua-static-document-url
          kahua-template-path
          kahua-error-document
          kahua-version
          kahua-revision
          kahua-version-info

          ;; Site Bundle
          kahua-site-create
          kahua-site-init
          ))
(select-module kahua.config)

(define (kahua-version) "##KAHUA_VERSION##")
(define (kahua-revision) "r##KAHUA_REVISION##")

(define-constant *kahua-static-document-url-default* "/##package##")

(define kahua-config (make-parameter #f))

(define-class <kahua-custom> (<kahua:read-only-mixin>)
  ((site-root :init-keyword :site-root :init-value #f :read-only #t)
   ;; working-directory - where kahua processes keeps logs and
   ;;     other various info.  This directory must be writable by
   ;;     kahua processes.
   (working-directory :init-keyword :working-directory :place :site)

   ;; sockbase - specifies where to open the server socket.
   ;;     Currently only unix domain socket is supported.
   ;;     The socket directory must be writable by kahua processes.
   (sockbase          :init-keyword :sockbase :place :site)

   (app-servers :init-keyword :app-servers :place :site)

   ;; application-directory - where there are kahua application code.
   ;;     Default: $(database-directory)/checkout
   (application-directory :init-keyword :application-directory :place :site)

   (plugin-directory :init-keyword :plugin-directory :place :site)

   (template-directory :init-keyword :template-directory :place :site)

   ;; database-directory - where kahua default database directory is placed.
   ;;     Default database path is $(database-directory)/db
   (database-directory :init-keyword :database-directory :place :site)

   ;; data-directory - where generic files store.
   (data-directory :init-keyword :data-directory :place :site)

   ;; temporary-directory - where bridges and workers share to read/write
   ;;                       temporary files.
   (temporary-directory :init-keyword :temporary-directory :place :site)

   (log-directory :init-keyword :log-directory :place :site)
   (cgilog-directory :init-keyword :cgilog-directory :place :site)
   (run-directory :init-keyword :run-directory :place :site)
   (etc-directory :init-keyword :etc-directory :place :site)

   ;; static-document-path - where kahua process puts static documents.
   ;;     Httpd must be able to show the contents under this directory.
   ;;     This directoy must be writable by kahua processes.
   (static-document-path :init-keyword :static-document-path :place :site)

   ;; static-document-url - the url path to reference the contents of
   ;;     static-document-path via httpd.
   (static-document-url  :init-keyword :static-document-url :init-value *kahua-static-document-url-default*)

   (default-database-name :init-keyword :default-database-name :init-value "db")

   ;; timeout-mins - session period of time
   (timeout-mins :init-keyword :timeout-mins
                 :init-value 60)

   ;; auto restart setting
   (auto-restart :init-keyword :auto-restart :init-value #f)

   ;; secure sandbox
   (secure-sandbox :init-keyword :secure-sandbox :init-value #t)

   ;; userconf-file - developer account file
   (userconf-file :init-keyword :userconf-file :place :site)

   (spvr-concurrency :init-keyword :spvr-concurrency :init-value 10)

   (httpd-concurrency :init-keyword :httpd-concurrency :init-value 10)

   (keyserv-concurrency :init-keyword :keyserv-concurrency :init-value 10)

   (session-domain :init-keyword :session-domain :init-value :site)

   ;; error-document-alist - like Apache's ErrorDocument directive.
   ;;  alist of (integer . string)
   (error-document-alist :init-keyword :error-document-alist :init-value '())

   ;; internal
   (user-mode :init-value #f)
   (config-file :init-value #f :init-keyword :config-file :place :site :read-only #t)
   ))

(define-class <kahua-config-meta> (<class>) ())
(define-class <kahua-config-mixin> () () :metaclass <kahua-config-meta>)

(define (kahua::abs-path path base)
  (or (and-let* ((base base))
        (abs-path path base))
      path))

(define-method compute-get-n-set ((class <kahua-config-meta>) slot)
  (let* ((s (slot-definition-name slot))
         (place (slot-definition-option slot :place #f))
         (acc (compute-slot-accessor class slot (next-method)))
         (bound? (cut slot-bound-using-accessor? <> acc))
         (getter (cond ((eq? s 'sockbase)
                        (lambda (o)
                          (let ((site-root (slot-ref o 'site-root))
                                (sockbase (slot-ref-using-accessor o acc)))
                            (if site-root
                                (sockbase-abs-path sockbase site-root)
                                sockbase))))
                       ((eq? place :site)
                        (lambda (o) (kahua::abs-path (slot-ref-using-accessor o acc) (slot-ref o 'site-root))))
                       (else (cut slot-ref-using-accessor <> acc))))
         (setter (case s
                   ((site-root)
                    (lambda (o v)
                      (slot-set-using-accessor! o acc (and v (abs-path v (current-directory))))))
                   (else
                    (cut slot-set-using-accessor! <> acc <>)))))
    (list getter setter bound? #t)))

(define-class <kahua-config> (<kahua-custom> <kahua:object-pool-mixin> <kahua-config-mixin>)
  ()
  :key-of (lambda (_ initargs)
            (kahua::abs-path (get-keyword* :config-file initargs #f) (get-keyword* :site-root initargs #f))))

;; Accessor functions

(define-macro (apply-define def . names)
  `(begin ,@(map (lambda (n) (list def n)) names)))

;; Define global accessor
(define-macro (define-kahua-config-accessor name)
  `(define ,(string->symbol #`"kahua-,|name|")
     (getter-with-setter
      (lambda () (slot-ref (kahua-config) (quote ,name)))
      (lambda (arg) (slot-set! (kahua-config) (quote ,name) arg)))))
(apply-define define-kahua-config-accessor
              sockbase
              working-directory
              app-servers
              application-directory
              plugin-directory
              template-directory
              database-directory
              data-directory
              temporary-directory
              log-directory
              cgilog-directory
              run-directory
              etc-directory
              default-database-name
              auto-restart
              error-document-alist)

;; Define global getter
(define-macro (define-kahua-config-getter name)
  `(define ,(string->symbol #`"kahua-,|name|")
     (lambda () (slot-ref (kahua-config) (quote ,name)))))
(apply-define define-kahua-config-getter
              site-root
              timeout-mins
              userconf-file
              secure-sandbox
              spvr-concurrency
              httpd-concurrency
              keyserv-concurrency
              session-domain
              config-file)

;; Utilities

(define (abs-path path base)
  (if (absolute-path? path)
      (simplify-path path)
      (let1 path (simplify-path (expand-path path))
        (simplify-path (if (absolute-path? path) path (build-path base path))))))

(define (sockbase-abs-path sockbase base)
  (rxmatch-case sockbase
    (#/^unix:(.+)$/ (#f path) #`"unix:,(abs-path path base)")
    (#/^[\w]+:/     (#f)      sockbase)
    (else                     #`"unix:,(abs-path sockbase base)")))

(define (kahua-sockbase-abs-path sockbase)
  (sockbase-abs-path sockbase (kahua-working-directory)))

(define (kahua-tmpbase)
  (build-path (kahua-temporary-directory) "kahua-"))

(define (kahua-dbpath dbpath)
  (let1 db-full-path (cut abs-path <> (kahua-database-directory))
    (rxmatch-case dbpath
      (#/^fs:(.+)$/ (#f path)  #`"fs:,(db-full-path path)")       ; Filesystem Database
      (#/^efs:(.+)$/ (#f path) #`"efs:,(db-full-path path)")      ; Extended Filesystem Database
      (#/^[\w]+:/   (#f)       dbpath)			          ; Other type Database(maybe DBI)
      (else                    #`"efs:,(db-full-path dbpath)")))) ; Extended Filesystem Database

(define (kahua-datapath . els)
  (apply build-path (kahua-data-directory) els))

(define (kahua-logpath filename)
  (build-path (kahua-log-directory) filename))

(define (kahua-cgilogpath filename)
  (build-path (kahua-cgilog-directory) filename))

(define (kahua-pidpath file)
  (build-path (kahua-run-directory) file))

(define kahua-spvr-pidpath    (cut kahua-pidpath "kahua-spvr.pid"))
(define kahua-keyserv-pidpath (cut kahua-pidpath "kahua-keyserv.pid"))
(define kahua-httpd-pidpath   (cut kahua-pidpath "kahua-httpd.pid"))

(define (kahua-static-document-path . path-components)
  (apply build-path (ref (kahua-config) 'static-document-path) path-components))

(define (kahua-static-document-url . path-components)
  (apply build-path (ref (kahua-config) 'static-document-url) path-components))

(define (kahua-template-path . path-components)
  (apply build-path (kahua-template-directory) path-components))

(define (kahua-error-document status)
  (assoc-ref (kahua-error-document-alist) status #f))

(define kahua-version-info
  (let1 vinfo (format "~a (~a)" (kahua-version) (kahua-revision))
    (lambda () vinfo)))

;; Site Bundle Facility

(define (create-site-app-servers file site mode)
  (with-output-to-file (abs-path file site)
    (lambda ()
      (display ";; -*-scheme-*-
;; Application Service Configuration alist.
;;
(;;Each entry follow this format:
 ;;(<type> :arguments (<arg> ...) :run-by-default <num>
 ;;        :profile <path-to-profile-base>
 ;;        :default-database-name <path-to-database>)
 )
")) :mode mode))

(define (create-site-userconf file site mode)
  (with-output-to-file (abs-path file site) (cut write '()) :mode mode))

(define (create-site-config file site mode . opts)
  (with-output-to-file (abs-path file site)
    (lambda ()
      (write `(make <kahua-config> ,@opts)))
    :mode mode))

(define (create-site-child-dir dir site mode)
  (make-directory* (abs-path dir site) mode))

;; Default Site Bundle Structure
(define-constant *default-site-structure*
  `((working-directory     :value ""
                           :shared-mode #o751 :private-mode #o711 :creator ,create-site-child-dir)
    (sockbase              :value "socket"
                           :shared-mode #o770 :private-mode #o700 :creator ,create-site-child-dir)
    (app-servers           :value "app-servers"
                           :shared-mode #o640 :private-mode #o600 :creator ,create-site-app-servers)
    (application-directory :value "app"
                           :shared-mode #o771 :private-mode #o700 :creator ,create-site-child-dir)
    (plugin-directory      :value "plugins"
                           :shared-mode #o771 :private-mode #o700 :creator ,create-site-child-dir)
    (template-directory    :value "templates"
                           :shared-mode #o771 :private-mode #o700 :creator ,create-site-child-dir)
    (database-directory    :value "database"
                           :shared-mode #o750 :private-mode #o700 :creator ,create-site-child-dir)
    (data-directory        :value "data"
                           :shared-mode #o770 :private-mode #o700 :creator ,create-site-child-dir)
    (temporary-directory   :value "tmp"
                           :shared-mode #o770 :private-mode #o700 :creator ,create-site-child-dir)
    (log-directory         :value "logs"
                           :shared-mode #o750 :private-mode #o700 :creator ,create-site-child-dir)
    (cgilog-directory      :value "cgilogs"
                           :shared-mode #o770 :private-mode #o700 :creator ,create-site-child-dir)
    (run-directory         :value "run"
                           :shared-mode #o750 :private-mode #o700 :creator ,create-site-child-dir)
    (etc-directory         :value "etc"
                           :shared-mode #o750 :private-mode #o700 :creator ,create-site-child-dir)
    (static-document-path  :value "static"
                           :shared-mode #o775 :private-mode #o755 :creator ,create-site-child-dir)
    (userconf-file         :value "etc/user.conf"
                           :shared-mode #o660 :private-mode #o600 :creator ,create-site-userconf)
    (config-file           :value "etc/kahua.conf"
                           :shared-mode #o660 :private-mode #o600 :creator ,create-site-config)
    ))

(define (site-default name)
  (and-let* ((l (assq name *default-site-structure*))
             (props (cdr l)))
    (get-keyword :value props)))

(define (kahua-site-create path . args)
  (let-keywords* args ((owner #f)
                       (group #f)
                       (shared? #f))
    (make-directory* (abs-path ".." (sys-normalize-pathname path :absolute #t :expand #t)))
    (let1 old-umask (sys-umask 0)
      (for-each (lambda (e)
                  (let* ((e (cdr e))
                         (target (get-keyword :value e))
                         (create (get-keyword :creator e))
                         (mode (if shared?
                                   (get-keyword :shared-mode e)
                                   (get-keyword :private-mode e))))
                    (create target path mode)
                    (sys-chown (abs-path target path)
                               (if owner (sys-user-name->uid owner) -1)
                               (if group (sys-group-name->gid group) -1))))
                (sort *default-site-structure*
                      (lambda (a b)
                        (string<? (get-keyword :value (cdr a))
                                  (get-keyword :value (cdr b))))))
      (sys-umask old-umask))))

(define (kahua-site-init site-path . maybe-conf-file)
  (define (site-config site-path)
    (abs-path (site-default 'config-file) site-path))
  (define (read-config path)
    (match (file->sexp-list path)
      ((('make '<kahua-config> . options)) options)
      (else (error "Cannot parse configuration file:" path)))) ; TODO: should raise proper <kahua-error>.
  (let* ((site-path (sys-normalize-pathname site-path :absolute #t :expand #t))
         (config (read-config (or (get-optional maybe-conf-file #f) (site-config site-path))))
         (initargs (fold (lambda (e r)
                           (let1 k (make-keyword (car e))
                             (if (get-keyword k config #f)
                                 r
                                 (list* k (get-keyword :value (cdr e)) r))))
                         config
                         *default-site-structure*)))
    (let1 c (apply make <kahua-config> :site-root site-path initargs)
      (kahua-config c)
      (push! *load-path* (kahua-application-directory))
      c)))

(define (kahua-common-init site . maybe-conf-file)
  (or (and-let* ((site (or site (sys-getenv "KAHUA_DEFAULT_SITE"))))
        (apply kahua-site-init site maybe-conf-file))
      (error "Site bundle must be specified by -S option or KAHUA_DEFAULT_SITE environment.")))

(provide "kahua/config")

;; Local variables:
;; mode: scheme
;; end:
