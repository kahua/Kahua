;; -*- coding: utf-8 ; mode: kahua -*-
;; sample kahua application
;;
;;  Copyright (c) 2003-2007 Scheme Arts, L.L.C., All rights reserved.
;;  Copyright (c) 2003-2007 Time Intermedia Corporation, All rights reserved.
;;  See COPYING for terms and conditions of using this software
;;

(use srfi-1)
(use srfi-13)
(use util.list)
(use gauche.collection)
(use gauche.logger)
(use text.parse)
(use file.util)

;; This implements very simple, yet functional WikiWikiWeb.
;;
;; This program uses 'login-manager' application server for
;; user authentication handling.

(log-open (kahua-logpath "wiki-iki.log"))

(define-constant *welcome-page* "Welcome to Wiki Iki")

;;========================================================
;; <page> structure
;;

(define-class <page> (<kahua-persistent-base>)
  ((name :init-keyword :name :init-value ""
         :allocation :persistent :index :any)
   (body :init-keyword :body :init-value ""
         :allocation :persistent)
   (prev :init-keyword :prev :init-value #f
         :allocation :persistent)
   (next :init-keyword :next :init-value #f
         :allocation :persistent)
   (creation-time :init-keyword :creation-time :init-form (sys-time)
                  :allocation :persistent)
   ))

(define-method newest-page ((page <page>))
  (cond ((ref page 'next) => newest-page) (else page)))

(define-method newest-page ((pagename <string>))
  (and-let* ((ls (coerce-to <list> (make-kahua-collection <page> :index `(name . ,pagename))))
             ((pair? ls)))
    (newest-page (car (sort ls (lambda (a b)
                                 (> (ref a 'creation-time)
                                    (ref b 'creation-time))))))))

(define-method newest-page (_) #f) ;; fallback

(define-method format-page ((page <page>) local-cont global-cont)
  (let* ((lines (call-with-input-string (ref page 'body) port->string-list))
         (paras (lines->paragraphs lines)))
    (local-cont (map/ (cut format-paragraph <> global-cont) paras))))

(define (lines->paragraphs lines)
  (let loop ((lines lines)
             (paras '()))
    (cond
     ((null? lines) (reverse! paras))
     ((string-null? (car lines)) (loop (cdr lines) paras))
     ((#/^\*+\s/ (car lines)) (loop (cdr lines) (cons (car lines) paras)))
     (else
      (let span ((lines lines) (r '()))
        (if (or (null? lines)
                (string-null? (car lines))
                (#/^\*+\s/ (car lines)))
          (loop lines (cons (reverse! r) paras))
          (span (cdr lines) (cons (car lines) r)))))
     )))

(define (nonexistent-page pagename global-cont)
  (global-cont
   (node-set/
    (page-title "Page does not exist: " pagename)
    (p/ (a/cont/ (@@/ (cont (cut edit-page #f pagename))) "Edit " pagename)))))

;; [String], Cont -> [Node]
;; NB: this isn't a CPS!
(define (format-paragraph lines cont)
  (define (next-token line r)
    (cond ((#/\[\[(.*?)\]\]/ line)
           => (lambda (m)
                (next-token (m 'after)
                            (list* (format-wikiname (m 1) cont) (m 'before) r))))
          (else (list* "\n" line r))))
  (define (format-lines lines r)
    (if (null? lines)
        (node-set (reverse! r))
        (format-lines (cdr lines) (next-token (car lines) r))))

  ;; body of format paragraph
  (if (string? lines)
      (cond ((#/^(\*+)\s/ lines)
             => (lambda (m)
                  ((ref `(_ ,h2/ ,h3/ ,h4/ ,h5/ ,h6/) (min 4 (string-length (m 1)))) (m 'after))))
            (else (p/ lines)))
      (p/ (format-lines lines '()))))

(define (format-wikiname name cont)
  (a/cont/ (@@/ (cont show-page name)) name))

(define (format-time time)
  (sys-strftime "%Y/%m/%d %H:%M:%S %Z" (sys-localtime time)))

;;========================================================
;; Generic page set
;;

(define-class <page-set> (<kahua-persistent-base>)
  ((name  :init-keyword :name :init-value #f
          :allocation :persistent :index :unique)
   (max-pages :init-keyword :max-pages :init-value #f
              :allocation :persistent)
   (pages :init-keyword :pages :init-value '()
          :allocation :persistent)
   ))

(define-method page-set-push-unique! ((self <page-set>) page)
  (let ((lis (cons page (remove (lambda (p)
                                  (equal? (ref page 'name) (ref p 'name)))
                                (ref self 'pages)))))
    (set! (ref self 'pages)
          (cond ((ref self 'max-pages) => (cut take* lis <>))
                (else lis)))))

(define (recent-changes)
  (or (find-kahua-instance <page-set> 'name "recent-changes")
      (make <page-set> :name "recent-changes" :max-pages 20)))

(define (format-recent-changes cont)
  (let1 pages (ref (recent-changes) 'pages)
    (table/ (@/ (id "recentchanges"))
            (tr/ (th/ (@/ (id "recentchanges")) "Recent Changes"))
            (map/ (lambda (page)
                    (tr/ (td/ (@/ (id "recentchanges"))
                              (format-wikiname (ref page 'name) cont))))
                  pages))))

;;========================================================
;; Main application
;;

(define (standard-page nodes)
  (html/ (head/ (title/ "Wiki Iki")
                (link/ (@/ (rel "stylesheet") (type "text/css")
                           (href (kahua-static-document-url
                                  "wiki-iki" "wiki-iki.css")))))
         (body/ nodes)))

(define-entry (show-page pagename)
  (let ((pagename (or pagename *welcome-page*)))
    (cond ((newest-page pagename) => (cut show-page/page <>))
          ((equal? pagename *welcome-page*)
           (show-page/page (create-welcome-page)))
          (else (nonexistent-page pagename standard-page)))))

(define (show-page/page page)
  (define (body-pane nodes)
    (td/ (@/ (id "bodypane"))
         (div/ nodes)
         (hr/)
         (div/ (a/cont/
                (@@/ (cont (cut edit-page (kahua-persistent-id page) (ref page 'name))))
                "[Edit]"))
         (div/ (@/ (id "lastchanged"))
               "Last Change: " (format-time (ref page 'creation-time)) (br/)
               "Powered by " (a/ (@/ (href "http://www.kahua.org/")) "Kahua"))))
  (define (side-pane)
    (td/ (@/ (id "sidepane"))
         (user-pane (ref page 'name))
         (format-recent-changes standard-page)))

  (format-page page
               (lambda (nodes)
                 (standard-page (node-set/
                                 (page-title (ref page 'name))
                                 (table/ (@/ (style "width:100%"))
                                         (tr/ (body-pane nodes) (side-pane))))))
               standard-page))

;; Edit and commit uses page-id for an existing page,
;; and pagename for a new page.

(define (edit-page page-id pagename)
  ;; NB: we pick the newest page in case if the user come back to
  ;; the old continuation.
  (let* ((orig-page (and page-id (newest-page (kahua-instance <page> page-id))))
         (page-id  (and orig-page (kahua-persistent-id orig-page))))
    (standard-page
     (node-set/
      (page-title "Edit " pagename)
      (form/cont/
       (@@/ (cont (cut commit-page page-id pagename)))
       (textarea/ (@/ (name "content") (rows 20) (cols 60))
                  (if orig-page (ref orig-page 'body) ""))
       (input/ (@/ (type "submit") (name "commit") (value "commit"))))))))

(define (commit-page page-id pagename)
  (let* ((content (canon-content (kahua-context-ref "content" "")))
         (orig-page (and page-id (kahua-instance <page> page-id))))
    (if orig-page
      (if (ref orig-page 'next)
        (conflict-page page)
        (if (equal? content (ref orig-page 'body))
          (show-page/page orig-page)
          (let1 new-page (make <page>
                           :name pagename :body content
                           :previous-page orig-page)
            (page-set-push-unique! (recent-changes) new-page)
            (set! (ref orig-page 'next) new-page)
            (show-page/page new-page))))
      (let1 new-page (make <page> :name pagename :body content)
        (page-set-push-unique! (recent-changes) new-page)
        (show-page/page new-page)))
    ))

(define (conflict-page page)
  (error "Conflict!"))

(define (page-title . names)
  (h1/ (a/cont/
        (@@/ (cont show-page))
        (img/ (@/ (src (kahua-static-document-url "wiki-iki/images/wiki-iki.png"))
                  (border "0") (width 64) (height 64))))
       (span/ (@/ (style "vertical-align:50%; margin-left:0.5em")) (node-set names))))

;; canonicalize EOL to #\newline
(define (canon-content content)
  (string-join (call-with-input-string content port->string-list)
               "\n" 'suffix))

;;========================================================
;; user login stuff
;;

(define (user-pane pagename)
  (cond ((kahua-current-user)
         => (lambda (u)
              (node-set/
               "Welcome, " (ref u 'login-name)
               (a/cont/ (@@/ (remote-cont 'login 'logout)
                             (return-cont show-page pagename))
                        "[Logout]"))))
        (else
         (a/cont/ (@@/ (remote-cont 'login 'login)
                       (return-cont show-page pagename))
                  "[Login]"))))

;;========================================================
;; initialization
;;

(define (create-welcome-page)
  (make <page>
    :name *welcome-page*
    :body "* Welcome to Wiki Iki
This is simple WikiWikiWeb by Kahua framework.
Wiki iki means small Wiki.

** Edit Page
To edit the page, click [edit] link bellow.

The empty line is to be paragraph separator,
the part binded by '[[' and
']]' is to be page reference and the line from
'* ', '** ', '*** ' is to be index.

** Create Page
Create nonexistent page reference.
You can create the page which name is the part
binded by '[[' and
']]'.

ex: [[Page that doesn't exist]]

"
))

(initialize-main-proc show-page)
