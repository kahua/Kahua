;; -*- coding: utf-8 ; mode: kahua -*-
;; Example kahua application (lambdabooks)
;;
;;  Copyright (c) 2003-2007 Scheme Arts, L.L.C., All rights reserved.
;;  Copyright (c) 2003-2007 Time Intermedia Corporation, All rights reserved.
;;  See COPYING for terms and conditions of using this software
;;

(define-class <review> (<kahua-persistent-base>)
  ((about     :init-keyword :about  :init-value #f
              :allocation :persistent :index :any) ;; back link to <book>
   (author    :init-keyword :author :init-value #f
              :allocation :persistent) ;; <user>
   (evaluation :init-keyword :evaluation :init-value 1
               :allocation :persistent) ;; 1-5
   (comment   :init-keyword :comment :init-value ""
              :allocation :persistent)
   ))

(define-method format-review ((self <review>) cont)
  (define (delete-review)
    (let1 book (and self (ref self 'about))
      (when book
        (set! (ref book 'reviews)
              (delete self (ref book 'reviews))))
      (remove-kahua-instance self)
      (if book
          (show-reviews book cont)
          (cont '()))))

  (tr/ (@/ (style "border-bottom: 2px solid black"))
       (td/
        (table/
         (tr/ (th/ (@/ (style "background-color:#dddddd; width:7em"))
                   "レビューア")
              (td/ ;(@: (style "width:35em"))
               (cond ((ref self 'author) => (cut ref <> 'login-name))
                     (else "guest"))))
         (tr/ (th/ (@/ (style "background-color:#dddddd")) "評価(1〜5)")
              (apply td/ (make-list (ref self 'evaluation) "★")))
         (tr/ (th/ (@/ (style "background-color:#dddddd")) "コメント")
              (td/ (ref self 'comment)))
         (when/ (and (kahua-authorized?)
                     (eq? (kahua-current-user) (slot-ref self 'author)))
           (tr/ (th/) (td/ (a/cont/ (@@/ (cont delete-review))
                                    "[レビューを削除]"))))))))

(define (show-reviews book cont)
  (if (not book)
      (cont (p/ "(書籍データがありません)"))
      ((lister (map values (ref book 'reviews))
               (lambda (rev count)
                 (format-review rev cont))
               :table-attrs (@/ (style "border-collapse: collapse; width:95%")))
       (lambda (nodes)
         (cont (node-set/
                (h2/ (ref book 'title) "に対する読者レビュー")
                (node-set/ nodes
                           (a/cont/ (@@/ (cont books (slot-ref book 'product-id)))
                                    "[書籍情報に戻る]")
                           (book-review-link book cont))))))))

(define (write-review book cont)
  (define (commit-review)
    (let ((user (kahua-current-user))
          (eval (kahua-context-ref "evaluation"))
          (comment (kahua-context-ref "comment")))
      (if book
          (begin
            (push! (ref book 'reviews)
                   (make <review> :about book :author user
                         :evaluation (or (string->number eval) 3)
                         :comment comment))
            (show-reviews book cont))
          (cont (p/ "(書籍データがありません)")))))

  (let1 user (kahua-current-user)
    (if (not book)
        (cont (p/ "(書籍データがありません)"))
        (cont (node-set/
               (h2/ (ref book 'title) "についてのレビューを書く")
               (form/cont/
                (@@/ (cont commit-review))
                (table/
                 (tr/ (th/ "レビューア")
                      (td/ (if user (ref user 'login-name) "guest")))
                 (tr/ (th/ "評価")
                      (td/ (select/ (@/ (name "evaluation"))
                                    (map/ option/ '("1" "2" "3" "4" "5")))))
                 (tr/ (th/ "コメント")
                      (td/ (textarea/ (@/ (name "comment") (cols 40)))))
                 (tr/ (th/)
                      (td/ (input/ (@/ (type "submit") (name "submit")
                                       (value "レビューを送信"))))))))
              ))))
